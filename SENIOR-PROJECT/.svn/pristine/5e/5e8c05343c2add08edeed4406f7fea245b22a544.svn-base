using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Web.Mvc;
using PhungNoiProject.Models;



namespace PhungNoiProject.Controllers
{
    [Authorize]
    public class OrderController : Controller
    {
        private phungnoiDBEntities db = new phungnoiDBEntities();



        //
        // GET: /Order/
        //[Authorize(Roles="Admin")]



        public ActionResult Index(string sortOrder)
        {

            List<Order> lOrder = null;
            if (Request != null && Request.Params["q"] != null)
            {
                string q = Request.Params["q"];
                lOrder = db.Order.Where(x => x.Member.UserName.ToLower().Contains(q.ToLower())).ToList();
            }
            else if (sortOrder != null)
            {

                ////////////////sort//////////////////

                ViewBag.DeliverDateSortParm = String.IsNullOrEmpty(sortOrder) ? "name_desc" : "";
                ViewBag.OrderStatusSortParm = sortOrder == "Status" ? "status_desc" : "Status";
                var pds = from p in db.Product
                          select p;
                switch (sortOrder)
                {
                    case "name_desc":
                        pds = pds.OrderByDescending(s => s.productName);
                        break;
                    case "Price":
                        pds = pds.OrderBy(s => s.price);
                        break;
                    case "price_desc":
                        pds = pds.OrderByDescending(s => s.price);
                        break;
                    default:
                        pds = pds.OrderBy(s => s.productName);
                        break;



                }
                return View("Index", pds);
            }
            else
            {


                lOrder = db.Order.OrderBy(x => x.deliveryDate).ToList();
            }


            var order = db.Order.Include(o => o.Member);

            return View("Index", lOrder.OrderByDescending(o => o.deliveryDate));
        }

        //
        // GET: /Order/Details/5

        public ActionResult Details(int id = 0)
        {
            Order order = db.Order.Find(id);
            if (order == null)
            {
                return HttpNotFound();
            }

            return View("Details", order);
        }

        //
        // GET: /Order/Create


        //
        // GET: /Order/Edit/5

        public ActionResult Edit(int id = 0)
        {

            Order order = db.Order.Find(id);

            if (order == null)
            {
                return HttpNotFound();
            }
            ViewBag.user_id = new SelectList(db.Member, "UserId", "UserName", order.memberID);
            return View("Edit", order);


        }

        //
        // POST: /Order/Edit/5

        [HttpPost]
        public ActionResult Edit(Order order,string a)
        {
            if (ModelState.IsValid)
            {
                
                db.Entry(order).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            ViewBag.user_id = new SelectList(db.Member, "UserId", "UserName", order.memberID);
            return View(order);
        }

        //
        // GET: /Order/Delete/5

        public ActionResult Delete(int id = 0)
        {
            Order order = db.Order.Find(id);
            if (order == null)
            {
                return HttpNotFound();
            }
            return View("Delete", order);
        }

        //
        // POST: /Order/Delete/5

        [HttpPost, ActionName("Delete")]
        public ActionResult DeleteConfirmed(int id)
        {
            Order order = db.Order.Find(id);
            db.Order.Remove(order);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        public ActionResult print(int id)
        {

            Order order = db.Order.Find(id);
            if (order == null)
            {
                return HttpNotFound();
            }

            return View("print", order);
        }

        protected override void Dispose(bool disposing)
        {
            db.Dispose();
            base.Dispose(disposing);
        }
    }
}